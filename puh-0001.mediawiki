<pre>
  PUH: 1
  Title: PUH Purpose and Guidelines
  Status: Draft
  Type: Standards Track
  Created: 2015-08-20
</pre>

==What is a PUH?==

PUH stands for "Prijedlog za UnaprijeÄ‘enje Hrvatske". A PUH is a design document providing information to the Srednji Prst community, or describing a new feature for Srednji Prst or its processes or environment. The PUH should provide a concise technical specification of the feature and a rationale for the feature.

We intend PUHs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Srednji Prst. The PUH author is responsible for building consensus within the community and documenting dissenting opinions.

Because the PUHs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.
==PUH Types==

There are three kinds of PUH:

* A Standards Track PUH describes any change that affects most or all Srednji Prst implementations, such as a change to the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Srednji Prst.
* An Informational PUH describes a Srednji Prst design issue, or provides general guidelines or information to the Srednji Prst community, but does not propose a new feature. Informational PUHs do not necessarily represent a Srednji Prst community consensus or recommendation, so users and implementors are free to ignore Informational PUHs or follow their advice.
* A Process PUH describes a process surrounding Srednji Prst, or proposes a change to (or an event in) a process. Process PUHs are like Standards Track PUHs but apply to areas other than the Srednji Prst protocol itself. They may propose an implementation, but not to Srednji Prst's codebase; they often require community consensus; unlike Informational PUHs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Srednji Prst development. Any meta-PUH is also considered a Process PUH.

==PUH Work Flow==

The PUH editors assign PUH numbers and change their status. Please send all PUH-related email to the PUH editor, which is listed under [[#PUH_Editors|PUH Editors]] below. Also see [[#PUH_Editor_Responsibilities__Workflow|PUH Editor Responsibilities & Workflow]].

The PUH process begins with a new idea for Srednji Prst. It is highly recommended that a single PUH contain a single key proposal or new idea. Small enhancements or patches often don't need a PUH and can be injected into the Srednji Prst development work flow with a patch submission to the Srednji Prst issue tracker. The more focused the PUH, the more successful it tends to be. The PUH editor reserves the right to reject PUH proposals if they appear too unfocused or too broad. If in doubt, split your PUH into several well-focused ones.

Each PUH must have a champion -- someone who writes the PUH using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The PUH champion (a.k.a. Author) should first attempt to ascertain whether the idea is PUH-able. Posting to the [https://groups.google.com/forum/#!forum/srednjiprst Srednji Prst] mailing list (and maybe the [https://www.reddit.com/r/srednjiprst subreddit] forum) is the best way to go about this.

Vetting an idea publicly before going as far as writing a PUH is meant to save the potential author time. Many ideas have been brought forward for changing Srednji Prst that have been rejected for various reasons. Asking the Srednji Prst community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Srednji Prst is used.

Once the champion has asked the Srednji Prst community as to whether an idea has any chance of acceptance, a draft PUH should be presented to [https://groups.google.com/forum/#!forum/srednjiprst Srednji Prst]. This gives the author a chance to flesh out the draft PUH to make properly formatted, of high quality, and to address initial concerns about the proposal.

Following a discussion, the proposal should be sent to the Srednji Prst-dev list and the PUH editor with the draft PUH. This draft must be written in PUH style as described below, else it will be sent back without further regard until proper formatting rules are followed.

If the PUH editor approves, he will assign the PUH a number, label it as Standards Track, Informational, or Process, give it status "Draft", and add it to the git repository. The PUH editor will not unreasonably deny a PUH. Reasons for denying PUH status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Srednji Prst philosophy.

The PUH author may update the Draft as necessary in the git repository. Updates to drafts may also be submitted by the author as pull requests.

Standards Track PUHs consist of two parts, a design document and a reference implementation. The PUH should be reviewed and accepted before a reference implementation is begun, unless a reference implementation will aid people in studying the PUH. Standards Track PUHs must include an implementation -- in the form of code, a patch, or a URL to same -- before it can be considered Final.

PUH authors are responsible for collecting community feedback on a PUH before submitting it for review. However, wherever possible, long open-ended discussions on public mailing lists should be avoided. Strategies to keep the discussions efficient include: setting up a separate SIG mailing list for the topic, having the PUH author accept private comments in the early design phases, setting up a wiki page or git repository, etc. PUH authors should use their discretion here.

For a PUH to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

Once a PUH has been accepted, the reference implementation must be completed. When the reference implementation is complete and accepted by the community, the status will be changed to "Final".

A PUH can also be assigned status "Deferred". The PUH author or editor can assign the PUH this status when no progress is being made on the PUH. Once a PUH is deferred, the PUH editor can re-assign it to draft status.

A PUH can also be "Rejected". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

PUHs can also be superseded by a different PUH, rendering the original obsolete. This is intended for Informational PUHs, where version 2 of an API can replace version 1.

The possible paths of the status of PUHs are as follows:

<img src=puh-0001/process.png></img>

Some Informational and Process PUHs may also have a status of "Active" if they are never meant to be completed. E.g. PUH 1 (this PUH).

==What belongs in a successful PUH?==

Each PUH should have the following parts:

* Preamble -- RFC 822 style headers containing meta-data about the PUH, including the PUH number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.

* Abstract -- a short (~200 word) description of the technical issue being addressed.

* Copyright/public domain -- Each PUH must either be explicitly labelled as placed in the public domain (see this PUH as an example) or licensed under the Open Publication License.

* Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Srednji Prst platforms.

* Motivation -- The motivation is critical for PUHs that want to change the Srednji Prst protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the PUH solves. PUH submissions without sufficient motivation may be rejected outright.

* Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages.

* The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.

* Backwards Compatibility -- All PUHs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The PUH must explain how the author proposes to deal with these incompatibilities. PUH submissions without a sufficient backwards compatibility treatise may be rejected outright.

* Reference Implementation -- The reference implementation must be completed before any PUH is given status "Final", but it need not be completed before the PUH is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

* The final implementation must include test code and documentation appropriate for the Srednji Prst protocol.

==PUH Formats and Templates==

PUHs should be written in mediawiki or markdown format. Image files should be included in a subdirectory for that PUH.

==PUH Header Preamble==

Each PUH must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  PUH: <PUH number>
  Title: <PUH title>
  Author: <list of authors' real names and optionally, email addrs>
* Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected |
           Withdrawn | Final | Superseded>
  Type: <Standards Track | Informational | Process>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
* Post-History: <dates of postings to Srednji Prst mailing list>
* Replaces: <PUH number>
* Superseded-By: <PUH number>
* Resolution: <url>
</pre>

The Author header lists the names, and optionally the email addresses of all the authors/owners of the PUH. The format of the Author header value must be

  Random J. User <address@dom.ain>

if the email address is included, and just

  Random J. User

if the address is not given.

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

Note: The Resolution header is required for Standards Track PUHs only. It contains a URL that should point to an email message or other web resource where the pronouncement about the PUH is made.

While a PUH is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the PUH is being discussed. No Discussions-To header is necessary if the PUH is being discussed privately with the author, or on the Srednji Prst email mailing lists.

The Type header specifies the type of PUH: Standards Track, Informational, or Process.

The Created header records the date that the PUH was assigned a number, while Post-History is used to record the dates of when new versions of the PUH are posted to Srednji Prst mailing lists. Both headers should be in yyyy-mm-dd format, e.g. 2001-08-14.

PUHs may have a Requires header, indicating the PUH numbers that this PUH depends on.

PUHs may also have a Superseded-By header indicating that a PUH has been rendered obsolete by a later document; the value is the number of the PUH that replaces the current document. The newer PUH must have a Replaces header containing the number of the PUH that it rendered obsolete.
Auxiliary Files

PUHs may include auxiliary files such as diagrams. Such files must be named PUH-XXXX-Y.ext, where "XXXX" is the PUH number, "Y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==Transferring PUH Ownership==

It occasionally becomes necessary to transfer ownership of PUHs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred PUH, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the PUH process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the PUH. We try to build consensus around a PUH, but if that's not possible, you can always submit a competing PUH.

If you are interested in assuming ownership of a PUH, send a message asking to take over, addressed to both the original author and the PUH editor. If the original author doesn't respond to email in a timely manner, the PUH editor will make a unilateral decision (it's not like such decisions can't be reversed :).

==PUH Editors==

The current PUH editor is Srednji Prst who can be contacted at [[mailto:srednjip@gmail.com|srednjip@gmail.com]].

==PUH Editor Responsibilities & Workflow==

A PUH editor must subscribe to the Srednji Prst development mailing list. All PUH-related correspondence should be sent (or CC'd) to gmaxwell@gmail.com.

For each new PUH that comes in an editor does the following:

* Read the PUH to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.
* The title should accurately describe the content.
* Edit the PUH for language (spelling, grammar, sentence structure, etc.), markup (for reST PUHs), code style (examples should match PUH 8 & 7).

If the PUH isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the PUH is ready for the repository, the PUH editor will:

* Assign a PUH number (almost always just the next available number, but sometimes it's a special/joke number, like 666 or 3141).

* Add the PUH to the [https://github.com/SrednjiPrst/SrednjiPrst] repository on GitHub.

* List the PUH in [[README.mediawiki]]

* Send email back to the PUH author with next steps (post to Srednji Prst mailing list).

Many PUHs are written and maintained by developers with write access to the Srednji Prst codebase. The PUH editors monitor PUH changes, and correct any structure, grammar, spelling, or markup mistakes we see.

The editors don't pass judgement on PUHs. We merely do the administrative & editorial part. Except for times like this, there's relatively low volume.

==History==

This document was derived heavily from Bitcoins's BIP-0001. In many places text was simply copied and modified. Although the BIP-0001 text was written by Amir Taaki, he is not responsible for its use in the Srednji Prst, and should not be bothered with technical questions specific to Srednji Prst or the PUH process. Please direct all comments to the PUH editors or the Srednji Prst mailing list.
